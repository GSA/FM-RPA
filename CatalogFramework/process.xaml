<Activity mc:Ignorable="sap sap2010 sads" x:Class="ProcessTransaction"
 xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities"
 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
 xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities"
 xmlns:s="clr-namespace:System;assembly=mscorlib"
 xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger"
 xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation"
 xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation"
 xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib"
 xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib"
 xmlns:sd="clr-namespace:System.Data;assembly=System.Data"
 xmlns:ui="http://schemas.uipath.com/workflow/activities"
 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_transactionItem" Type="InArgument(sd:DataRow)" />
    <x:Property Name="in_config" Type="InArgument(scg:Dictionary(x:String, x:Object))" />
    <x:Property Name="io_transactionLog" Type="InOutArgument(sd:DataRow)" />
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap2010:WorkflowViewState.IdRef>ProcessTransaction_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>Microsoft.VisualBasic.CompilerServices</x:String>
      <x:String>System.Text.RegularExpressions</x:String>
      <x:String>System.Globalization</x:String>
      <x:String>System.Xml.Serialization</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>Microsoft.VisualStudio.Services.Common</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.Mail</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>System.Runtime.WindowsRuntime</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Plugin.Workflow</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="Description: In this file all other process specific files will be invoked. If an application exception occurs, the current transaction can be retried. If a BRE is thrown, the transaction will be skipped. Can be a flowchart or sequence. " DisplayName="Process" sap2010:WorkflowViewState.IdRef="Sequence_175">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:String" Name="output4PFile" />
      <Variable x:TypeArguments="sd:DataTable" Name="results4P" />
      <Variable x:TypeArguments="x:String" Name="vendorUploadFile" />
      <Variable x:TypeArguments="sd:DataTable" Name="vendorUpload" />
      <Variable x:TypeArguments="sd:DataTable" Name="resultsTable" />
      <Variable x:TypeArguments="scg:Dictionary(x:String, s:String[])" Name="diffs" />
      <Variable x:TypeArguments="scg:Dictionary(x:String, s:String[])" Name="matches" />
    </Sequence.Variables>
    <Assign sap2010:WorkflowViewState.IdRef="Assign_1">
      <Assign.To>
        <OutArgument x:TypeArguments="x:String">[output4PFile]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:String">[in_config("input4PFileLocation").ToString + in_transactionItem("4P").ToString]</InArgument>
      </Assign.Value>
    </Assign>
    <ui:ReadRange AddHeaders="True" DataTable="[results4P]" DisplayName="Read 4P Results" sap2010:WorkflowViewState.IdRef="ReadRange_1" SheetName="RESULTS" WorkbookPath="[output4PFile]">
      <ui:ReadRange.Range>
        <InArgument x:TypeArguments="x:String">
          <Literal x:TypeArguments="x:String" Value="" />
        </InArgument>
      </ui:ReadRange.Range>
    </ui:ReadRange>
    <Assign sap2010:WorkflowViewState.IdRef="Assign_10">
      <Assign.To>
        <OutArgument x:TypeArguments="x:String">[vendorUploadFile]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:String">[in_config("inputVendorFileLocation").ToString + in_transactionItem("Vendor").ToString]</InArgument>
      </Assign.Value>
    </Assign>
    <ui:ReadRange AddHeaders="True" DataTable="[vendorUpload]" DisplayName="Read Vendor upload" sap2010:WorkflowViewState.IdRef="ReadRange_2" SheetName="Sheet1" WorkbookPath="[vendorUploadFile]">
      <ui:ReadRange.Range>
        <InArgument x:TypeArguments="x:String">
          <Literal x:TypeArguments="x:String" Value="" />
        </InArgument>
      </ui:ReadRange.Range>
    </ui:ReadRange>
    <ui:BuildDataTable DataTable="[resultsTable]" DisplayName="Build data table" sap2010:WorkflowViewState.IdRef="BuildDataTable_1" TableInfo="&lt;NewDataSet&gt;&#xA;  &lt;xs:schema id=&quot;NewDataSet&quot; xmlns=&quot;&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;&gt;&#xA;    &lt;xs:element name=&quot;NewDataSet&quot; msdata:IsDataSet=&quot;true&quot; msdata:MainDataTable=&quot;TableName&quot; msdata:UseCurrentLocale=&quot;true&quot;&gt;&#xA;      &lt;xs:complexType&gt;&#xA;        &lt;xs:choice minOccurs=&quot;0&quot; maxOccurs=&quot;unbounded&quot;&gt;&#xA;          &lt;xs:element name=&quot;TableName&quot;&gt;&#xA;            &lt;xs:complexType&gt;&#xA;              &lt;xs:sequence&gt;&#xA;                &lt;xs:element name=&quot;SIN&quot; type=&quot;xs:string&quot; /&gt;&#xA;                &lt;xs:element name=&quot;Product_x0020_Number&quot; type=&quot;xs:string&quot; /&gt;&#xA;                &lt;xs:element name=&quot;Match&quot; type=&quot;xs:string&quot; minOccurs=&quot;0&quot; /&gt;&#xA;                &lt;xs:element name=&quot;Differences&quot; type=&quot;xs:string&quot; minOccurs=&quot;0&quot; /&gt;&#xA;              &lt;/xs:sequence&gt;&#xA;            &lt;/xs:complexType&gt;&#xA;          &lt;/xs:element&gt;&#xA;        &lt;/xs:choice&gt;&#xA;      &lt;/xs:complexType&gt;&#xA;    &lt;/xs:element&gt;&#xA;  &lt;/xs:schema&gt;&#xA;&lt;/NewDataSet&gt;" />
    <ui:ForEachRow CurrentIndex="{x:Null}" DataTable="[results4P]" DisplayName="For each row" sap2010:WorkflowViewState.IdRef="ForEachRow_1">
      <ui:ForEachRow.Body>
        <ActivityAction x:TypeArguments="sd:DataRow">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="sd:DataRow" Name="row" />
          </ActivityAction.Argument>
          <Sequence DisplayName="Body" sap2010:WorkflowViewState.IdRef="Sequence_177">
            <Sequence.Variables>
              <Variable x:TypeArguments="x:Int32" Name="foundRowIndex" />
              <Variable x:TypeArguments="x:String" Name="price" />
              <Variable x:TypeArguments="x:String" Name="mfg" />
              <Variable x:TypeArguments="x:String" Name="name" />
              <Variable x:TypeArguments="x:String" Name="description" />
              <Variable x:TypeArguments="x:String" Name="sin" />
              <Variable x:TypeArguments="x:Int32" Default="4" Name="infoToCheckNum" />
              <Variable x:TypeArguments="scg:List(x:String)" Name="errorList" />
              <Variable x:TypeArguments="scg:List(x:String)" Name="matchList" />
            </Sequence.Variables>
            <Assign sap2010:WorkflowViewState.IdRef="Assign_2">
              <Assign.To>
                <OutArgument x:TypeArguments="scg:List(x:String)">[errorList]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="scg:List(x:String)">[New List(Of String)]</InArgument>
              </Assign.Value>
            </Assign>
            <Assign sap2010:WorkflowViewState.IdRef="Assign_3">
              <Assign.To>
                <OutArgument x:TypeArguments="scg:List(x:String)">[matchList]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="scg:List(x:String)">[New List(Of String)]</InArgument>
              </Assign.Value>
            </Assign>
            <Assign sap2010:WorkflowViewState.IdRef="Assign_4">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">[sin]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">[row("SIN").ToString]</InArgument>
              </Assign.Value>
            </Assign>
            <ui:LookupDataTable CellValue="{x:Null}" LookupColumnIndex="{x:Null}" LookupDataColumn="{x:Null}" TargetColumnIndex="{x:Null}" TargetColumnName="{x:Null}" TargetDataColumn="{x:Null}" DataTable="[vendorUpload]" DisplayName="Lookup data table" sap2010:WorkflowViewState.IdRef="LookupDataTable_1" LookupColumnName="mfgpart" LookupValue="[row(&quot;Manufacturer Part Number&quot;).ToString]" RowIndex="[foundRowIndex]" />
            <If Condition="[foundRowIndex &gt; 0]" sap2010:WorkflowViewState.IdRef="If_5">
              <If.Then>
                <Sequence sap2010:WorkflowViewState.IdRef="Sequence_176">
                  <Sequence.Variables>
                    <Variable x:TypeArguments="x:String" Name="country" />
                  </Sequence.Variables>
                  <ui:LogMessage DisplayName="Log message" sap2010:WorkflowViewState.IdRef="LogMessage_1" Level="Info" Message="[&quot;found row &quot;+foundRowIndex.ToString]" />
                  <Assign sap2010:WorkflowViewState.IdRef="Assign_5">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[price]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[vendorUpload.Rows(foundRowIndex)("gsaPrice").ToString]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <Assign sap2010:WorkflowViewState.IdRef="Assign_6">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[mfg]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[vendorUpload.Rows(foundRowIndex)("mfgname").ToString]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <Assign sap2010:WorkflowViewState.IdRef="Assign_7">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[name]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[vendorUpload.Rows(foundRowIndex)("prodname").ToString]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <Assign sap2010:WorkflowViewState.IdRef="Assign_8">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[country]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[vendorUpload.Rows(foundRowIndex)("ppoint").ToString]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <Assign sap2010:WorkflowViewState.IdRef="Assign_9">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[description]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[vendorUpload.Rows(foundRowIndex)("description").ToString]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <If Condition="[Double.Parse(row(&quot;Proposed Price&quot;).ToString) = Double.Parse(price)]" sap2010:WorkflowViewState.IdRef="If_1">
                    <If.Then>
                      <InvokeMethod DisplayName="Invoke method" sap2010:WorkflowViewState.IdRef="InvokeMethod_1" MethodName="Add">
                        <InvokeMethod.TargetObject>
                          <InArgument x:TypeArguments="scg:List(x:String)">[matchList]</InArgument>
                        </InvokeMethod.TargetObject>
                        <InArgument x:TypeArguments="x:String">Price match</InArgument>
                      </InvokeMethod>
                    </If.Then>
                    <If.Else>
                      <InvokeMethod DisplayName="Invoke method" sap2010:WorkflowViewState.IdRef="InvokeMethod_2" MethodName="Add">
                        <InvokeMethod.TargetObject>
                          <InArgument x:TypeArguments="scg:List(x:String)">[errorList]</InArgument>
                        </InvokeMethod.TargetObject>
                        <InArgument x:TypeArguments="x:String">Price does not match</InArgument>
                      </InvokeMethod>
                    </If.Else>
                  </If>
                  <If Condition="[row(&quot;Manufacturer Name&quot;).ToString.ToLower.Equals(mfg.ToLower)]" sap2010:WorkflowViewState.IdRef="If_2">
                    <If.Then>
                      <InvokeMethod DisplayName="Invoke method" sap2010:WorkflowViewState.IdRef="InvokeMethod_3" MethodName="Add">
                        <InvokeMethod.TargetObject>
                          <InArgument x:TypeArguments="scg:List(x:String)">[matchList]</InArgument>
                        </InvokeMethod.TargetObject>
                        <InArgument x:TypeArguments="x:String">Mfg match</InArgument>
                      </InvokeMethod>
                    </If.Then>
                    <If.Else>
                      <InvokeMethod DisplayName="Invoke method" sap2010:WorkflowViewState.IdRef="InvokeMethod_4" MethodName="Add">
                        <InvokeMethod.TargetObject>
                          <InArgument x:TypeArguments="scg:List(x:String)">[errorList]</InArgument>
                        </InvokeMethod.TargetObject>
                        <InArgument x:TypeArguments="x:String">Mfg does not match</InArgument>
                      </InvokeMethod>
                    </If.Else>
                  </If>
                  <If Condition="[row(&quot;Country Of Origin Inference&quot;).ToString.ToLower.Equals(country.ToLower)]" DisplayName="check courty of origin" sap2010:WorkflowViewState.IdRef="If_3">
                    <If.Then>
                      <InvokeMethod DisplayName="Invoke method" sap2010:WorkflowViewState.IdRef="InvokeMethod_5" MethodName="Add">
                        <InvokeMethod.TargetObject>
                          <InArgument x:TypeArguments="scg:List(x:String)">[matchList]</InArgument>
                        </InvokeMethod.TargetObject>
                        <InArgument x:TypeArguments="x:String">Origin match</InArgument>
                      </InvokeMethod>
                    </If.Then>
                    <If.Else>
                      <InvokeMethod DisplayName="Invoke method" sap2010:WorkflowViewState.IdRef="InvokeMethod_6" MethodName="Add">
                        <InvokeMethod.TargetObject>
                          <InArgument x:TypeArguments="scg:List(x:String)">[errorList]</InArgument>
                        </InvokeMethod.TargetObject>
                        <InArgument x:TypeArguments="x:String">Coutry of Origin does not match</InArgument>
                      </InvokeMethod>
                    </If.Else>
                  </If>
                  <If Condition="[row(&quot;Vendor Description&quot;).ToString.ToLower.Equals(description.ToLower)]" sap2010:WorkflowViewState.IdRef="If_4">
                    <If.Then>
                      <InvokeMethod DisplayName="Invoke method" sap2010:WorkflowViewState.IdRef="InvokeMethod_7" MethodName="Add">
                        <InvokeMethod.TargetObject>
                          <InArgument x:TypeArguments="scg:List(x:String)">[matchList]</InArgument>
                        </InvokeMethod.TargetObject>
                        <InArgument x:TypeArguments="x:String">Description match</InArgument>
                      </InvokeMethod>
                    </If.Then>
                    <If.Else>
                      <InvokeMethod DisplayName="Invoke method" sap2010:WorkflowViewState.IdRef="InvokeMethod_8" MethodName="Add">
                        <InvokeMethod.TargetObject>
                          <InArgument x:TypeArguments="scg:List(x:String)">[errorList]</InArgument>
                        </InvokeMethod.TargetObject>
                        <InArgument x:TypeArguments="x:String">Description does not match</InArgument>
                      </InvokeMethod>
                    </If.Else>
                  </If>
                </Sequence>
              </If.Then>
              <If.Else>
                <InvokeMethod DisplayName="Invoke method" sap2010:WorkflowViewState.IdRef="InvokeMethod_9" MethodName="Add">
                  <InvokeMethod.TargetObject>
                    <InArgument x:TypeArguments="scg:List(x:String)">[errorList]</InArgument>
                  </InvokeMethod.TargetObject>
                  <InArgument x:TypeArguments="x:String">Item not found</InArgument>
                </InvokeMethod>
              </If.Else>
            </If>
            <If Condition="[matchList.Count &lt; infoToCheckNum]" DisplayName="check if everything matched" sap2010:WorkflowViewState.IdRef="If_6">
              <If.Then>
                <ui:AddDataRow DataRow="{x:Null}" ArrayRow="[{row(&quot;SIN&quot;).ToString, row(&quot;Manufacturer Part Number&quot;).ToString, String.join(&quot;,&quot;,matchList.ToArray), String.join(&quot;,&quot;,errorList.ToArray)}]" DataTable="[resultsTable]" DisplayName="Add data row to full results" sap2010:WorkflowViewState.IdRef="AddDataRow_1" />
              </If.Then>
              <If.Else>
                <ui:AddDataRow DataRow="{x:Null}" ArrayRow="[{row(&quot;SIN&quot;).ToString, row(&quot;Manufacturer Part Number&quot;).ToString, &quot;ALL&quot;, String.join(&quot;,&quot;,errorList.ToArray)}]" DataTable="[resultsTable]" DisplayName="Add data row to full results" sap2010:WorkflowViewState.IdRef="AddDataRow_2" />
              </If.Else>
            </If>
          </Sequence>
        </ActivityAction>
      </ui:ForEachRow.Body>
    </ui:ForEachRow>
    <ui:WriteRange AddHeaders="True" DataTable="[resultsTable]" DisplayName="Write Range" sap2010:WorkflowViewState.IdRef="WriteRange_1" SheetName="Sheet1" StartingCell="A1" WorkbookPath="[in_config(&quot;outputFileLocation&quot;).ToString + in_transactionItem(&quot;Output&quot;).ToString]" />
    <sads:DebugSymbol.Symbol>d0tDOlxVc2Vyc1xta2ltZXJ5XERvY3VtZW50c1xHU0FcUlBBLU9TUy1tYXN0ZXJcQ2F0YWxvZ0ZyYW1ld29ya1xwcm9jZXNzLnhhbWxpUQO1Ag4CAQFbBWIOAwGIAWMFaRQDAYEBagVxDgIBfXIFeBQCAXZ5BXm6CwIBc3oFsgIVAgEIswIFswKnAgIBAmAwYH8DAYsBXTFdPwMBiQFjL2M8AwGGAWYLZjoDAYUBY5MBY5wBAwGEAWOqAWO6AQMBggFvMG+HAQMBgAFsMWxDAgF+ci9yPwIBe3ULdToCAXpymQFyoQECAXlyrwFywwECAXd5InkyAgF0ejZ6QwIBcYABC68CFgIBCbMCqgGzAq4BAgEHswIwswJAAgEFswKUAbMCnAECAQSzArwBswKkAgIBA4gBO4gBPgIBCowBDZMBFgIBbZQBDZsBFgIBaZwBDaMBFgIBZaQBDaQBrgMCAV6lAQ2mAhICARenAg2uAhICAQuRAUKRAVcCAXCOAUOOAU4CAW6ZAUKZAVcCAWyWAUOWAU4CAWqhATihAU0CAWieATmeAT4CAWakAZoDpAGrAwIBY6QB2gKkAZADAgFipAHEAqQBzQICAWGkAc4BpAHeAQIBX6UBG6UBMwIBGKcBEZwCHAIBHp8CEaQCIAIBGqcCG6cCQgIBDKkCEakC5wICAROsAhGsAsoCAgEPqwETqwG0AQIBW6wBE7MBHAIBV7QBE7sBHAIBU7wBE8MBHAIBT8QBE8sBHAIBS8wBE9MBHAIBR9QBE+UBGAIBPeYBE/cBGAIBM/gBE4kCGAIBKYoCE5sCGAIBH6ECRqECUQIBHKMCOqMCSAIBG6kC+gGpAooCAgEVqQI8qQLvAQIBFKwC3QGsAu0BAgERrAI8rALSAQIBEKsBgAGrAbEBAgFcsQE+sQF1AgFargE/rgFGAgFYuQE+uQF0AgFWtgE/tgFEAgFUwQE+wQF1AgFSvgE/vgFFAgFQyQE+yQFzAgFOxgE/xgFIAgFM0QE+0QF4AgFKzgE/zgFMAgFI1AEh1AFxAgE+1gEX2wEmAgFD3gEX4wEmAgE/5gEh5gFsAgE06AEX7QEmAgE58AEX9QEmAgE1+AEh+AF6AgEq+gEX/wEmAgEvggIXhwImAgErigIhigJ1AgEgjAIXkQImAgEllAIXmQImAgEh2AFM2AFXAgFF2gFA2gFLAgFE4AFM4AFXAgFB4gFA4gFUAgFA6gFM6gFXAgE77AFA7AFJAgE68gFM8gFXAgE39AFA9AFSAgE2/AFM/AFXAgEx/gFA/gFMAgEwhAJMhAJXAgEthgJAhgJfAgEsjgJMjgJXAgEnkAJAkAJRAgEmlgJMlgJXAgEjmAJAmAJaAgEi</sads:DebugSymbol.Symbol>
  </Sequence>
  <sap2010:WorkflowViewState.ViewStateManager>
    <sap2010:ViewStateManager>
      <sap2010:ViewStateData Id="Assign_1" sap:VirtualizedContainerService.HintSize="781,60">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="ReadRange_1" sap:VirtualizedContainerService.HintSize="781,87">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_10" sap:VirtualizedContainerService.HintSize="781,60" />
      <sap2010:ViewStateData Id="ReadRange_2" sap:VirtualizedContainerService.HintSize="781,87">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="BuildDataTable_1" sap:VirtualizedContainerService.HintSize="781,59">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_2" sap:VirtualizedContainerService.HintSize="729,60" />
      <sap2010:ViewStateData Id="Assign_3" sap:VirtualizedContainerService.HintSize="729,60" />
      <sap2010:ViewStateData Id="Assign_4" sap:VirtualizedContainerService.HintSize="729,60" />
      <sap2010:ViewStateData Id="LookupDataTable_1" sap:VirtualizedContainerService.HintSize="729,22" />
      <sap2010:ViewStateData Id="LogMessage_1" sap:VirtualizedContainerService.HintSize="464,91" />
      <sap2010:ViewStateData Id="Assign_5" sap:VirtualizedContainerService.HintSize="464,60" />
      <sap2010:ViewStateData Id="Assign_6" sap:VirtualizedContainerService.HintSize="464,60" />
      <sap2010:ViewStateData Id="Assign_7" sap:VirtualizedContainerService.HintSize="464,60" />
      <sap2010:ViewStateData Id="Assign_8" sap:VirtualizedContainerService.HintSize="464,60" />
      <sap2010:ViewStateData Id="Assign_9" sap:VirtualizedContainerService.HintSize="464,60" />
      <sap2010:ViewStateData Id="InvokeMethod_1" sap:VirtualizedContainerService.HintSize="218,132" />
      <sap2010:ViewStateData Id="InvokeMethod_2" sap:VirtualizedContainerService.HintSize="218,132" />
      <sap2010:ViewStateData Id="If_1" sap:VirtualizedContainerService.HintSize="464,280" />
      <sap2010:ViewStateData Id="InvokeMethod_3" sap:VirtualizedContainerService.HintSize="218,132" />
      <sap2010:ViewStateData Id="InvokeMethod_4" sap:VirtualizedContainerService.HintSize="218,132" />
      <sap2010:ViewStateData Id="If_2" sap:VirtualizedContainerService.HintSize="464,280" />
      <sap2010:ViewStateData Id="InvokeMethod_5" sap:VirtualizedContainerService.HintSize="218,132" />
      <sap2010:ViewStateData Id="InvokeMethod_6" sap:VirtualizedContainerService.HintSize="218,132" />
      <sap2010:ViewStateData Id="If_3" sap:VirtualizedContainerService.HintSize="464,280" />
      <sap2010:ViewStateData Id="InvokeMethod_7" sap:VirtualizedContainerService.HintSize="218,132" />
      <sap2010:ViewStateData Id="InvokeMethod_8" sap:VirtualizedContainerService.HintSize="218,132" />
      <sap2010:ViewStateData Id="If_4" sap:VirtualizedContainerService.HintSize="464,280" />
      <sap2010:ViewStateData Id="Sequence_176" sap:VirtualizedContainerService.HintSize="486,1995">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="InvokeMethod_9" sap:VirtualizedContainerService.HintSize="218,132" />
      <sap2010:ViewStateData Id="If_5" sap:VirtualizedContainerService.HintSize="729,2143" />
      <sap2010:ViewStateData Id="AddDataRow_1" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="AddDataRow_2" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="If_6" sap:VirtualizedContainerService.HintSize="729,208" />
      <sap2010:ViewStateData Id="Sequence_177" sap:VirtualizedContainerService.HintSize="751,2877">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="ForEachRow_1" sap:VirtualizedContainerService.HintSize="781,3025">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="WriteRange_1" sap:VirtualizedContainerService.HintSize="781,115">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_175" sap:VirtualizedContainerService.HintSize="803,3899">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="ProcessTransaction_1" sap:VirtualizedContainerService.HintSize="843,5727">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="ShouldCollapseAll">False</x:Boolean>
            <x:Boolean x:Key="ShouldExpandAll">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
    </sap2010:ViewStateManager>
  </sap2010:WorkflowViewState.ViewStateManager>
</Activity>